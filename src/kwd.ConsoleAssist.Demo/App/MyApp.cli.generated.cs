//Generated by: kwd.ConsoleAssist 1.0.0.0
//From: kwd.ConsoleAssist.Demo.App.MyApp
//At: 2020-01-09T05:56:08.0808534Z
// <generated>
// </generated>
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace kwd.ConsoleAssist.Demo.App
{
    public partial class _MyApp
    {
        private readonly IServiceProvider _container;
        private readonly global::kwd.ConsoleAssist.Demo.App.MyApp _model;
        public _MyApp(IServiceProvider container, global::kwd.ConsoleAssist.Demo.App.MyApp model)
        {
            _container = (container);
            _model = (model);
        }

        public Task<int?> Execute(ArraySegment<string> args, CancellationToken cancel)
        {
            switch (args.FirstOrDefault())
            {
                case "version":
                    return Version(args.Slice(1), cancel);
                case "sub1":
                    return Sub1(args.Slice(1), cancel);
                case "witharg":
                    return WithArg(args.Slice(1), cancel);
                case "login":
                    return Login(args.Slice(1), cancel);
                case "latest":
                    return Latest(args.Slice(1), cancel);
                default:
                    return Run(args, cancel);
            }
        }

        public Task<int?> Run(ArraySegment<string> args, CancellationToken cancel)
        {
            switch (args.Count)
            {
                case 0:
                    cancel.ThrowIfCancellationRequested();
                    return Task.FromResult<int?>(_model.Run());
                default:
                    throw new Exception("Extra arguments found");
            }
        }

        public Task<int?> Version(ArraySegment<string> args, CancellationToken cancel)
        {
            switch (args.Count)
            {
                case 0:
                    cancel.ThrowIfCancellationRequested();
                    return Task.FromResult<int?>(_model.Version());
                default:
                    throw new Exception("Extra arguments found");
            }
        }

        public Task<int?> WithArg(ArraySegment<string> args, CancellationToken cancel)
        {
            switch (args.Count)
            {
                case 2:
                    cancel.ThrowIfCancellationRequested();
                    return Task.FromResult<int?>(_model.WithArg(args.ElementAt(0), args.ElementAt(1)));
                case 1:
                    cancel.ThrowIfCancellationRequested();
                    return Task.FromResult<int?>(_model.WithArg(args.ElementAt(0)));
                default:
                    throw new Exception("Extra arguments found");
            }
        }

        public async Task<int?> Latest(ArraySegment<string> args, CancellationToken cancel)
        {
            switch (args.Count)
            {
                case 0:
                    await _model.Latest();
                    return null;
                default:
                    throw new Exception("Extra arguments found");
            }
        }

        public async Task<int?> Sub1(ArraySegment<string> args, CancellationToken cancel)
        {
            global::kwd.ConsoleAssist.Demo.App.MySubCommand model = _model.Sub1(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance<global::kwd.ConsoleAssist.Demo.App.MySubCommand>(_container));
            return await (new _MySubCommand(_container, model)).Execute(args, cancel);
        }

        public async Task<int?> Login(ArraySegment<string> args, CancellationToken cancel)
        {
            global::kwd.ConsoleAssist.Demo.App.MyShell model = _model.Login(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance<global::kwd.ConsoleAssist.Demo.App.MyShell>(_container));
            return await (new _MyShell(_container, model)).Execute(args, cancel);
        }

        public partial class _MySubCommand
        {
            private readonly IServiceProvider _container;
            private readonly global::kwd.ConsoleAssist.Demo.App.MySubCommand _model;
            public _MySubCommand(IServiceProvider container, global::kwd.ConsoleAssist.Demo.App.MySubCommand model)
            {
                _container = (container);
                _model = (model);
            }

            public Task<int?> Execute(ArraySegment<string> args, CancellationToken cancel)
            {
                switch (args.FirstOrDefault())
                {
                    default:
                        return Run(args, cancel);
                }
            }

            public Task<int?> Run(ArraySegment<string> args, CancellationToken cancel)
            {
                switch (args.Count)
                {
                    case 0:
                        cancel.ThrowIfCancellationRequested();
                        return Task.FromResult<int?>(_model.Run());
                    default:
                        throw new Exception("Extra arguments found");
                }
            }
        }

        public partial class _MyShell
        {
            private readonly IServiceProvider _container;
            private readonly global::kwd.ConsoleAssist.Demo.App.MyShell _model;
            public _MyShell(IServiceProvider container, global::kwd.ConsoleAssist.Demo.App.MyShell model)
            {
                _container = (container);
                _model = (model);
            }

            public Task<int?> Execute(ArraySegment<string> args, CancellationToken cancel)
            {
                switch (args.FirstOrDefault())
                {
                    case "setname":
                        return SetName(args.Slice(1), cancel);
                    case "setpwd":
                        return SetPwd(args.Slice(1), cancel);
                    default:
                        return Run(args, cancel);
                }
            }

            public Task<int?> Run(ArraySegment<string> args, CancellationToken cancel)
            {
                switch (args.Count)
                {
                    case 0:
                        cancel.ThrowIfCancellationRequested();
                        return Task.FromResult<int?>(_model.Run());
                    default:
                        throw new Exception("Extra arguments found");
                }
            }

            public Task<int?> SetName(ArraySegment<string> args, CancellationToken cancel)
            {
                switch (args.Count)
                {
                    case 1:
                        cancel.ThrowIfCancellationRequested();
                        _model.SetName(args.ElementAt(0));
                        return Task.FromResult<int?>(null);
                    default:
                        throw new Exception("Extra arguments found");
                }
            }

            public Task<int?> SetPwd(ArraySegment<string> args, CancellationToken cancel)
            {
                switch (args.Count)
                {
                    case 0:
                        cancel.ThrowIfCancellationRequested();
                        _model.SetPwd(cancel);
                        return Task.FromResult<int?>(null);
                    default:
                        throw new Exception("Extra arguments found");
                }
            }
        }
    }
}