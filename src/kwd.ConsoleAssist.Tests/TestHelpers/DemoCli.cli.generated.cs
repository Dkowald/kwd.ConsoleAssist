//Generated by: kwd.ConsoleAssist 1.0.0.0
//From: kwd.ConsoleAssist.Tests.TestHelpers.DemoCli
//At: 2020-01-09T05:34:26.1268534Z
// <generated>
// </generated>
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace kwd.ConsoleAssist.Tests.TestHelpers
{
    public partial class _DemoCli
    {
        private readonly IServiceProvider _container;
        private readonly global::kwd.ConsoleAssist.Tests.TestHelpers.DemoCli _model;
        public _DemoCli(IServiceProvider container, global::kwd.ConsoleAssist.Tests.TestHelpers.DemoCli model)
        {
            _container = (container);
            _model = (model);
        }

        public Task<int?> Execute(ArraySegment<string> args, CancellationToken cancel)
        {
            switch (args.FirstOrDefault())
            {
                case "action1":
                    return Action1(args.Slice(1), cancel);
                case "action2":
                    return Action2(args.Slice(1), cancel);
                case "actionwithcancel":
                    return ActionWithCancel(args.Slice(1), cancel);
                case "actionwithint":
                    return ActionWithInt(args.Slice(1), cancel);
                case "actionwithoptionalint":
                    return ActionWithOptionalInt(args.Slice(1), cancel);
                case "sub1":
                    return Sub1(args.Slice(1), cancel);
                case "sub2":
                    return Sub2(args.Slice(1), cancel);
                case "sub3":
                    return Sub3(args.Slice(1), cancel);
                case "asyncrun":
                    return AsyncRun(args.Slice(1), cancel);
                case "cmdwithrunoverloads":
                    return CmdWithRunOverloads(args.Slice(1), cancel);
                case "cmdwithnorun":
                    return CmdWithNoRun(args.Slice(1), cancel);
                case "commandinothernamespace":
                    return CommandInOtherNamespace(args.Slice(1), cancel);
                default:
                    return Run(args, cancel);
            }
        }

        public Task<int?> Run(ArraySegment<string> args, CancellationToken cancel)
        {
            switch (args.Count)
            {
                case 0:
                    cancel.ThrowIfCancellationRequested();
                    _model.Run();
                    return Task.FromResult<int?>(null);
                default:
                    throw new Exception("Extra arguments found");
            }
        }

        public Task<int?> Action1(ArraySegment<string> args, CancellationToken cancel)
        {
            switch (args.Count)
            {
                case 0:
                    cancel.ThrowIfCancellationRequested();
                    _model.Action1();
                    return Task.FromResult<int?>(null);
                default:
                    throw new Exception("Extra arguments found");
            }
        }

        public Task<int?> Action2(ArraySegment<string> args, CancellationToken cancel)
        {
            switch (args.Count)
            {
                case 1:
                    cancel.ThrowIfCancellationRequested();
                    _model.Action2(args.ElementAt(0));
                    return Task.FromResult<int?>(null);
                default:
                    throw new Exception("Extra arguments found");
            }
        }

        public Task<int?> ActionWithCancel(ArraySegment<string> args, CancellationToken cancel)
        {
            switch (args.Count)
            {
                case 0:
                    cancel.ThrowIfCancellationRequested();
                    _model.ActionWithCancel(cancel);
                    return Task.FromResult<int?>(null);
                default:
                    throw new Exception("Extra arguments found");
            }
        }

        public Task<int?> ActionWithInt(ArraySegment<string> args, CancellationToken cancel)
        {
            switch (args.Count)
            {
                case 0:
                    cancel.ThrowIfCancellationRequested();
                    return Task.FromResult<int?>(_model.ActionWithInt());
                default:
                    throw new Exception("Extra arguments found");
            }
        }

        public Task<int?> ActionWithOptionalInt(ArraySegment<string> args, CancellationToken cancel)
        {
            switch (args.Count)
            {
                case 0:
                    cancel.ThrowIfCancellationRequested();
                    return Task.FromResult<int?>(_model.ActionWithOptionalInt());
                default:
                    throw new Exception("Extra arguments found");
            }
        }

        public async Task<int?> Sub1(ArraySegment<string> args, CancellationToken cancel)
        {
            global::kwd.ConsoleAssist.Tests.TestHelpers.DemoCli.Cmd1 model = _model.Sub1();
            return await (new _Cmd1(_container, model)).Execute(args, cancel);
        }

        public async Task<int?> Sub2(ArraySegment<string> args, CancellationToken cancel)
        {
            global::kwd.ConsoleAssist.Tests.TestHelpers.DemoCli.Cmd1 model = _model.Sub2(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance<global::kwd.ConsoleAssist.Tests.TestHelpers.DemoCli.Cmd1>(_container));
            return await (new _Cmd1(_container, model)).Execute(args, cancel);
        }

        public async Task<int?> Sub3(ArraySegment<string> args, CancellationToken cancel)
        {
            global::kwd.ConsoleAssist.Tests.TestHelpers.DemoCli.AsyncTests model = _model.Sub3();
            return await (new _AsyncTests(_container, model)).Execute(args, cancel);
        }

        public async Task<int?> AsyncRun(ArraySegment<string> args, CancellationToken cancel)
        {
            global::kwd.ConsoleAssist.Tests.TestHelpers.DemoCli.AsyncRunCmd model = _model.AsyncRun();
            return await (new _AsyncRunCmd(_container, model)).Execute(args, cancel);
        }

        public async Task<int?> CmdWithRunOverloads(ArraySegment<string> args, CancellationToken cancel)
        {
            global::kwd.ConsoleAssist.Tests.TestHelpers.DemoCli.Cmd3 model = _model.CmdWithRunOverloads();
            return await (new _Cmd3(_container, model)).Execute(args, cancel);
        }

        public async Task<int?> CmdWithNoRun(ArraySegment<string> args, CancellationToken cancel)
        {
            global::kwd.ConsoleAssist.Tests.TestHelpers.DemoCli.Cmd4 model = _model.CmdWithNoRun();
            return await (new _Cmd4(_container, model)).Execute(args, cancel);
        }

        public async Task<int?> CommandInOtherNamespace(ArraySegment<string> args, CancellationToken cancel)
        {
            global::kwd.ConsoleAssist.Tests.TestHelpers.SubCommand.SubCommand1 model = _model.CommandInOtherNamespace();
            return await (new _SubCommand1(_container, model)).Execute(args, cancel);
        }

        public partial class _Cmd1
        {
            private readonly IServiceProvider _container;
            private readonly global::kwd.ConsoleAssist.Tests.TestHelpers.DemoCli.Cmd1 _model;
            public _Cmd1(IServiceProvider container, global::kwd.ConsoleAssist.Tests.TestHelpers.DemoCli.Cmd1 model)
            {
                _container = (container);
                _model = (model);
            }

            public Task<int?> Execute(ArraySegment<string> args, CancellationToken cancel)
            {
                switch (args.FirstOrDefault())
                {
                    case "foo":
                        return Foo(args.Slice(1), cancel);
                    default:
                        return Run(args, cancel);
                }
            }

            public Task<int?> Run(ArraySegment<string> args, CancellationToken cancel)
            {
                switch (args.Count)
                {
                    case 0:
                        cancel.ThrowIfCancellationRequested();
                        _model.Run();
                        return Task.FromResult<int?>(null);
                    default:
                        throw new Exception("Extra arguments found");
                }
            }

            public async Task<int?> Foo(ArraySegment<string> args, CancellationToken cancel)
            {
                switch (args.Count)
                {
                    case 3:
                        await _model.Foo(args.ElementAt(0), args.ElementAt(1), args.ElementAt(2));
                        return null;
                    case 2:
                        cancel.ThrowIfCancellationRequested();
                        _model.Foo(args.ElementAt(0), args.ElementAt(1));
                        return null;
                    case 1:
                        cancel.ThrowIfCancellationRequested();
                        _model.Foo(args.ElementAt(0));
                        return null;
                    default:
                        throw new Exception("Extra arguments found");
                }
            }
        }

        public partial class _AsyncTests
        {
            private readonly IServiceProvider _container;
            private readonly global::kwd.ConsoleAssist.Tests.TestHelpers.DemoCli.AsyncTests _model;
            public _AsyncTests(IServiceProvider container, global::kwd.ConsoleAssist.Tests.TestHelpers.DemoCli.AsyncTests model)
            {
                _container = (container);
                _model = (model);
            }

            public Task<int?> Execute(ArraySegment<string> args, CancellationToken cancel)
            {
                switch (args.FirstOrDefault())
                {
                    case "action1":
                        return Action1(args.Slice(1), cancel);
                    case "actionwithoptionalintreturn":
                        return ActionWithOptionalIntReturn(args.Slice(1), cancel);
                    case "foo":
                        return Foo(args.Slice(1), cancel);
                    default:
                        return Run(args, cancel);
                }
            }

            public async Task<int?> Run(ArraySegment<string> args, CancellationToken cancel)
            {
                switch (args.Count)
                {
                    case 0:
                        await _model.Run();
                        return null;
                    default:
                        throw new Exception("Extra arguments found");
                }
            }

            public async Task<int?> Action1(ArraySegment<string> args, CancellationToken cancel)
            {
                switch (args.Count)
                {
                    case 1:
                        await _model.Action1(args.ElementAt(0), cancel);
                        return null;
                    default:
                        throw new Exception("Extra arguments found");
                }
            }

            public async Task<int?> ActionWithOptionalIntReturn(ArraySegment<string> args, CancellationToken cancel)
            {
                switch (args.Count)
                {
                    case 1:
                        cancel.ThrowIfCancellationRequested();
                        return _model.ActionWithOptionalIntReturn(args.ElementAt(0));
                    case 0:
                        return await _model.ActionWithOptionalIntReturn();
                    default:
                        throw new Exception("Extra arguments found");
                }
            }

            public async Task<int?> Foo(ArraySegment<string> args, CancellationToken cancel)
            {
                global::kwd.ConsoleAssist.Tests.TestHelpers.DemoCli.Cmd1 model = await _model.Foo(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance<global::kwd.ConsoleAssist.Tests.TestHelpers.DemoCli.Cmd1>(_container));
                return await (new _Cmd1(_container, model)).Execute(args, cancel);
            }

            public partial class _Cmd1
            {
                private readonly IServiceProvider _container;
                private readonly global::kwd.ConsoleAssist.Tests.TestHelpers.DemoCli.Cmd1 _model;
                public _Cmd1(IServiceProvider container, global::kwd.ConsoleAssist.Tests.TestHelpers.DemoCli.Cmd1 model)
                {
                    _container = (container);
                    _model = (model);
                }

                public Task<int?> Execute(ArraySegment<string> args, CancellationToken cancel)
                {
                    switch (args.FirstOrDefault())
                    {
                        case "foo":
                            return Foo(args.Slice(1), cancel);
                        default:
                            return Run(args, cancel);
                    }
                }

                public Task<int?> Run(ArraySegment<string> args, CancellationToken cancel)
                {
                    switch (args.Count)
                    {
                        case 0:
                            cancel.ThrowIfCancellationRequested();
                            _model.Run();
                            return Task.FromResult<int?>(null);
                        default:
                            throw new Exception("Extra arguments found");
                    }
                }

                public async Task<int?> Foo(ArraySegment<string> args, CancellationToken cancel)
                {
                    switch (args.Count)
                    {
                        case 3:
                            await _model.Foo(args.ElementAt(0), args.ElementAt(1), args.ElementAt(2));
                            return null;
                        case 2:
                            cancel.ThrowIfCancellationRequested();
                            _model.Foo(args.ElementAt(0), args.ElementAt(1));
                            return null;
                        case 1:
                            cancel.ThrowIfCancellationRequested();
                            _model.Foo(args.ElementAt(0));
                            return null;
                        default:
                            throw new Exception("Extra arguments found");
                    }
                }
            }
        }

        public partial class _AsyncRunCmd
        {
            private readonly IServiceProvider _container;
            private readonly global::kwd.ConsoleAssist.Tests.TestHelpers.DemoCli.AsyncRunCmd _model;
            public _AsyncRunCmd(IServiceProvider container, global::kwd.ConsoleAssist.Tests.TestHelpers.DemoCli.AsyncRunCmd model)
            {
                _container = (container);
                _model = (model);
            }

            public Task<int?> Execute(ArraySegment<string> args, CancellationToken cancel)
            {
                switch (args.FirstOrDefault())
                {
                    default:
                        return Run(args, cancel);
                }
            }

            public async Task<int?> Run(ArraySegment<string> args, CancellationToken cancel)
            {
                switch (args.Count)
                {
                    case 0:
                        return await _model.Run(cancel);
                    default:
                        throw new Exception("Extra arguments found");
                }
            }
        }

        public partial class _Cmd3
        {
            private readonly IServiceProvider _container;
            private readonly global::kwd.ConsoleAssist.Tests.TestHelpers.DemoCli.Cmd3 _model;
            public _Cmd3(IServiceProvider container, global::kwd.ConsoleAssist.Tests.TestHelpers.DemoCli.Cmd3 model)
            {
                _container = (container);
                _model = (model);
            }

            public Task<int?> Execute(ArraySegment<string> args, CancellationToken cancel)
            {
                switch (args.FirstOrDefault())
                {
                    default:
                        return Run(args, cancel);
                }
            }

            public async Task<int?> Run(ArraySegment<string> args, CancellationToken cancel)
            {
                switch (args.Count)
                {
                    case 1:
                        await _model.Run(args.ElementAt(0));
                        return null;
                    case 0:
                        cancel.ThrowIfCancellationRequested();
                        _model.Run();
                        return null;
                    default:
                        throw new Exception("Extra arguments found");
                }
            }
        }

        public partial class _Cmd4
        {
            private readonly IServiceProvider _container;
            private readonly global::kwd.ConsoleAssist.Tests.TestHelpers.DemoCli.Cmd4 _model;
            public _Cmd4(IServiceProvider container, global::kwd.ConsoleAssist.Tests.TestHelpers.DemoCli.Cmd4 model)
            {
                _container = (container);
                _model = (model);
            }

            public Task<int?> Execute(ArraySegment<string> args, CancellationToken cancel)
            {
                switch (args.FirstOrDefault())
                {
                    case "foo":
                        return Foo(args.Slice(1), cancel);
                    default:
                        throw new Exception("Extra arguments found");
                }
            }

            public Task<int?> Foo(ArraySegment<string> args, CancellationToken cancel)
            {
                switch (args.Count)
                {
                    case 1:
                        cancel.ThrowIfCancellationRequested();
                        _model.Foo(args.ElementAt(0));
                        return Task.FromResult<int?>(null);
                    default:
                        throw new Exception("Extra arguments found");
                }
            }
        }

        public partial class _SubCommand1
        {
            private readonly IServiceProvider _container;
            private readonly global::kwd.ConsoleAssist.Tests.TestHelpers.SubCommand.SubCommand1 _model;
            public _SubCommand1(IServiceProvider container, global::kwd.ConsoleAssist.Tests.TestHelpers.SubCommand.SubCommand1 model)
            {
                _container = (container);
                _model = (model);
            }

            public Task<int?> Execute(ArraySegment<string> args, CancellationToken cancel)
            {
                switch (args.FirstOrDefault())
                {
                    default:
                        return Run(args, cancel);
                }
            }

            public Task<int?> Run(ArraySegment<string> args, CancellationToken cancel)
            {
                switch (args.Count)
                {
                    case 0:
                        cancel.ThrowIfCancellationRequested();
                        _model.Run();
                        return Task.FromResult<int?>(null);
                    default:
                        throw new Exception("Extra arguments found");
                }
            }
        }
    }
}